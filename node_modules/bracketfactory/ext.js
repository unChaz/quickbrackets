var crypto = require('crypto');
var tty = require('tty');
var url = require('url');
var util = require('util');

require('classtool');

Error.define = function(obj, name, genericMessage) {
  if(typeof obj == 'string') {
    genericMessage = name;
    name = obj;
    obj = null;
  }
  function CustomError(specificMessage, constr) {
    Error.captureStackTrace(this, constr || CustomError)
    this.message = (specificMessage || genericMessage);
  };
  util.inherits(CustomError, Error);
  CustomError.prototype.name = name;
  if(obj) obj[name] = CustomError;
  return CustomError;
};

Object.extend = function(a, b) {
  for(var k in b) {a[k] = b[k]}
};

Object.deepExtend = function(a, b) {
  for(var k in b) {
    if((a[k] instanceof Array) && (b[k] instanceof Array)) {
      a[k] = b[k];
    } else if(a[k] && (typeof a[k] == 'object') && (typeof b[k] == 'object')) {
      Object.deepExtend(a[k], b[k]);
    } else {
      a[k] = b[k];
    }
  }
};

String.prototype.beginsWith = function(needle) {
  return(this.substr(0, needle.length) == needle);
};

String.prototype.beginsWithAny = function(needles) {
  for(var i=0; i<needles.length; i++) {
    if(this.substr(0, needles[i].length) == needles[i]){
      return true;
    }
  }
  return false;
};

Number.prototype.formatMoney = function(c, d, t){
  var n = this, 
  c = isNaN(c = Math.abs(c)) ? 2 : c, 
  d = d == undefined ? "." : d, 
  t = t == undefined ? "," : t, 
  s = n < 0 ? "-" : "", 
  i = parseInt(n = Math.abs(+n || 0).toFixed(c)) + "", 
  j = (j = i.length) > 3 ? j % 3 : 0;
  return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

//round to specified number of places
Number.prototype.round = function(places) {
  if(!places) return Math.round(this);
  var tmp = Math.pow(10,places);
  return Math.round(this * tmp) / tmp;
};

//round to specified number of places
Number.prototype.floor = function(places) {
  if(!places) return Math.floor(this);
  var tmp = Math.pow(10,places);
  return Math.floor(this * tmp) / tmp;
};

Number.prototype.ceil = function(places) {
  if(!places) return Math.ceil(this);
  var tmp = Math.pow(10,places);
  return Math.ceil(this * tmp) / tmp;
};

//Converts milliseconds to "MM:SS" format
//duplicated in client/js/invoice.js
Number.prototype.msecToMMSS = function(msec) {
    var s = msec / 1000;
    var M = Math.floor(s / 60);
    var S = Math.round(s - (M*60));
    if(S == 60){ S=0; M++;}
    S = (S < 10) ? '0' + S: S;
    return M + ':' + S;
  };

Object.defineProperty(Array.prototype, 'includes', {
  enumerable: false,
  value: function(obj) {
    for(var i=0;i<this.length;i++) {
      if(this[i] == obj) return true;
    } 
    return false
  },
});

Object.defineProperty(Array.prototype, 'collect', {
  enumerable: false,
  value: function(lambda) {
    var answer = new Array(this.length);
    for(var i=0;i<this.length;i++) {
      answer[i] = lambda(this[i]);
    }
    return answer;
  },
});

Date.prototype.startOfDay = function() {
  var answer = new Date(this.getTime());
  answer.setHours(0);
  answer.setMinutes(0);
  answer.setSeconds(0);
  answer.setMilliseconds(0);
  return answer;
};

Date.prototype.startOfHour = function() {
  var answer = new Date(this.getTime());
  answer.setMinutes(0);
  answer.setSeconds(0);
  answer.setMilliseconds(0);
  return answer;
};

/*
var monthAbbrv = ['JAN', 'FEB', 'MAR', 'APR', 'MAY', 'JUN', 'JUL', 'AUG', 'SEP', 'OCT', 'NOV', 'DEC'];
Date.prototype.dateString = function() {
  var answer = '';
  var tmp = this.getUTCDate().toString();
  if(tmp.length == 1) answer += '0';
  answer += tmp + ' ';
  answer += monthAbbrv[this.getUTCMonth()];
  answer += ' ' + this.getUTCFullYear();
  return answer;
};*/

//YYYY/MM/DD
Date.prototype.dateString = function(delimiter) {
  if(!delimiter) var delimiter = '/';
  var answer = this.getUTCFullYear().toString() + delimiter;
  var tmp = (this.getUTCMonth() + 1).toString();
  if(tmp.length == 1) answer += 0;
  answer += tmp + delimiter;
  tmp = this.getUTCDate().toString();
  if(tmp.length == 1) answer += '0';
  return answer + tmp;
};

//US formatted date: MM/DD/YYYY
Date.prototype.dateString2 = function(delimiter) {
  if(!delimiter) var delimiter = '/';
  var answer = '';
  var tmp = (this.getUTCMonth() + 1).toString();
  if(tmp.length == 1) answer += '0';
  answer += tmp + delimiter;
  tmp = this.getUTCDate().toString();
  if(tmp.length == 1) answer += '0';
  answer += tmp + delimiter;
  answer += this.getUTCFullYear().toString();
  return answer;
};

var months = ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'];
Date.prototype.dateString_DDMMMMYYYY = function() {
  var answer = [];
  answer.push(this.getUTCDate().toString());
  answer.push(months[this.getUTCMonth()]);
  answer.push(this.getUTCFullYear().toString());
  return answer.join(' ');
};

Date.prototype.timeString = function() {
  var answer = '';
  var tmp = this.getUTCHours().toString();
  if(tmp.length == 1) answer += '0';
  answer += tmp + ':';
  tmp = this.getUTCMinutes().toString();
  if(tmp.length == 1) answer += '0';
  answer += tmp + ':';
  tmp = this.getUTCSeconds().toString();
  if(tmp.length == 1) answer += '0';
  return answer + tmp;
};

Date.prototype.timestampString = function() {
  return this.dateString() + ' ' + this.timeString();
};

exports.trim = function(str) {
  return str.replace(/^\s+|\s+$/g,"");
}

//destructively consumes the list
exports.syncForEach = function(list, callback, end, offset) {
  if(!offset) offset = 0;
  if(list.length > offset) {
    callback(list[offset], function() {
      exports.syncForEach(list[offset], callback, end, offset + 1);
    });
  } else {
    end();
  }
}

exports.iterateUntilNoneSatisfy = function(list, test, callback, end) {
  var gotOne = false;
  var i = 0;

  while((!gotOne) && (i<list.length)) {
    if(test(list[i])) {
      gotOne = true;
      callback(list[i], function() {exports.iterateUntilNoneSatisfy(list, test, callback, end)});
    }
    i++;
  }
  if(!gotOne) end();
}

// For compositional inheritance
exports.inherit = function() {
  var parent;
  var child = arguments[0];
  if(arguments.length > 2) {
    // this allows chaining multiple classes in the call
    parent = this.inherit.apply(this,Array.prototype.slice.call(arguments, 1));
  } else {
    parent = arguments[1];
  }
  var answer = function() {return child.apply(this,arguments)};
  answer.super_ = parent;
  answer.prototype = Object.create(parent.prototype, {
    constructor: {value: answer, enumerable: false}
  });
  for(var ea in child.prototype) {
    answer.prototype[ea] = child.prototype[ea];
  };
  return answer;
}

// For emulating a mutex (call critical() to start, then done() when
//   when critical section is completed)
exports.Mutex = function() {
  var self = this;
  self.queue = new Array();
  self.critical = function(closure) {
    self.queue.push(closure);
    self.run();
  };
  self.run = function() {
    if(!self.running) {
      if(self.queue.length > 0) {
        self.running = true;
        (self.queue.shift())();
      }
    }
  };
  self.done = function() {
    self.running = false;
    self.run();
  };
};

// For syncing multiple async calls
exports.Sync = function(count) {
  this.count = count;
  this.done = function() {
    this.count--;
    if((this.count == 0) && (this.closure)) this.closure();
  };
  this.finish = function(closure) {
    this.closure = closure;
    if(this.count == 0) this.closure();
  }
}

// For asking something on command line
exports.ask = function(question, callback) {
  var stdin = process.stdin, stdout = process.stdout;
  var str = '';

  tty.setRawMode(true);
  stdin.resume();
  stdout.write(question + ": ");

  stdin.on('data', function(data) {
    var tmp = data.toString();
    if(tmp.indexOf('\x0d') < 0) {
      str += tmp;
    } else {
      str += tmp.slice(0, tmp.indexOf('\x0d'));
      tty.setRawMode(false);
      callback(str);
    }
  });
}

// decode a aes256 base64 string
exports.decode = function(code, key, encoding) {
  encoding = encoding ? encoding : 'base64';
  var aes256 = crypto.createDecipher('aes-256-cbc', key);
  var bin = new Buffer(code, encoding).toString('binary');
  var answer = aes256.update(bin, 'binary', 'utf8');
  answer += aes256.final('utf8');
  return answer;
}

// encode a string with aes256 to base64
exports.encode = function(aString, key, encoding) {
  encoding = encoding ? encoding : 'base64';
  var aes256 = crypto.createCipher('aes-256-cbc', key);
  var answer = aes256.update(aString, 'utf8', 'binary');
  answer += aes256.final('binary');
  answer = new Buffer(answer, 'binary').toString(encoding);
  return answer;
}

var emailRegex = /(?:[a-z0-9!#$%&'*+/=?^_`{|}~-]+(?:\.[a-z0-9!#$%&'*+/=?^_`{|}~-]+)*|"(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21\x23-\x5b\x5d-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])*")@(?:(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z0-9](?:[a-z0-9-]*[a-z0-9])?|\[(?:(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)\.){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?|[a-z0-9-]*[a-z0-9]:(?:[\x01-\x08\x0b\x0c\x0e-\x1f\x21-\x5a\x53-\x7f]|\\[\x01-\x09\x0b\x0c\x0e-\x7f])+)\])/

exports.isValidEmailAddress = function(email) {
  // check that it's a properly formatted email address
  if(!email) return false;
  if(!email.match(emailRegex)) return false;
  return true;
}

exports.isValidWebUrl = function(aUrl) {
  try {
    return ['http:', 'https:'].includes(url.parse(aUrl).protocol);
  } catch(e) {
    return false;
  }
}

exports.isValidHttpsUrl = function(aUrl) {
  try {
    return (url.parse(aUrl).protocol == 'https:');
  } catch(e) {
    return false;
  }
}

require('http').IncomingMessage.prototype.getRemoteAddress = function() {
  if(this.headers['cf-connecting-ip']) return this.headers['cf-connecting-ip'];
  if (this.ip) return this.ip;
  var sock = this.socket;
  if (sock.socket) return sock.socket.remoteAddress;
  return sock.remoteAddress;
};
